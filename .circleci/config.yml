# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  aws-elastic-beanstalk: circleci/aws-elastic-beanstalk@2.0.1
  node: circleci/node@4.7

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:16.10
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages:
          # If you are using yarn, change the line below from "npm" to "yarn"
          pkg-manager: npm
      - run:
          name: Run tests
          command: npm test


commands:
    setup:
        description: |
            Install and authenticate with the Elastic Beanstalk CLI. You must have your AWS auth environment variables set for ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_DEFALTU_REGION"].
        steps:
            - run:
                command: |
                    if [[ $EUID == 0 ]]; then export SUDO=""; else # Check if we are root
                      export SUDO="sudo";
                    fi

                    SetupPython() {
                        # setups python3
                        $SUDO apt-get -qq -y install python3-dev
                        SetupPipx
                    }

                    SetupPipx() {
                        if [ "$(which pip | tail -1)" ]; then
                            echo "pip found"
                        else
                            echo "pip not found"
                            $SUDO apt-get update
                            $SUDO apt-get install -qq -y python3-setuptools
                            curl https://bootstrap.pypa.io/pip/3.5/get-pip.py | python3
                        fi
                        # install venv with system for pipx
                        # by using pipx we dont have to worry about activating the virtualenv before using eb
                        $SUDO apt-get -qq -y install python3-venv
                        pip install pipx
                    }



                    InstallEBCLI() {
                        if uname -a | grep Darwin > /dev/null 2>&1; then
                            cd /tmp || { echo "Not able to access /tmp"; return; }
                            git clone https://github.com/aws/aws-elastic-beanstalk-cli-setup.git
                            brew install zlib openssl readline
                            CFLAGS="-I$(brew --prefix openssl)/include -I$(brew --prefix readline)/include -I$(xcrun --show-sdk-path)/usr/include" LDFLAGS="-L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib -L$(brew --prefix zlib)/lib" ./aws-elastic-beanstalk-cli-setup/scripts/bundled_installer >/dev/null 2>&1
                            return $?
                        elif uname -a | grep Linux > /dev/null 2>&1; then
                            $SUDO apt-get -qq update > /dev/null
                            # these are the system level deps for the ebcli
                            $SUDO apt-get -qq -y install build-essential zlib1g-dev libssl-dev libncurses-dev libffi-dev libsqlite3-dev libreadline-dev libbz2-dev
                            if [ "$(which python3 | tail -1)" ]; then
                                echo "Python3 env found"
                                SetupPipx
                            else
                                echo "Python3 env not found, setting up python with apt"
                                SetupPython
                            fi
                        fi
                            pipx install awsebcli
                            echo "Complete"
                    }

                    CheckAWSEnvVars() {
                        ERRMSGTEXT="has not been set. This environment variable is required for authentication."
                        if [ -z "$AWS_ACCESS_KEY_ID" ]; then
                            echo "AWS_ACCESS_KEY_ID $ERRMSGTEXT"
                            exit 1
                        fi
                        if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
                            echo "AWS_SECRET_ACCESS_KEY $ERRMSGTEXT"
                            exit 1
                        fi
                        if [ -z "$AWS_DEFALTU_REGION" ]; then
                            echo "AWS_DEFALTU_REGION $ERRMSGTEXT"
                            exit 1
                        fi
                    }

                    # Will not run if sourced for bats.
                    # View src/tests for more information.
                    TEST_ENV="bats-core"
                    if [ "${0#*$TEST_ENV}" == "$0" ]; then
                        CheckAWSEnvVars
                        InstallEBCLI
                    fi
                name: Setting Up Elastic Beanstalk CLI


workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample:
    jobs:
      - build-and-test
      # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
      # - node/test
dependencies:
  pre:
    - pip intsall awsebcli
deployment: #部屬的環境
  develop:
    branch: /^(?!master$).*$/ #表示任何一個branch被觸發時都執行commands
    commands:
      - eb use env-dev --profile default #將eb切換到「env-dev」環境
      - eb deploy --profile default #把程式deploy上「env-dev」
